trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
  - repository: PreprocessorRepo
    type: git
    name: Processor Tools

parameters:
- name: forceDockerBuild
  displayName: Force Docker Build
  type: boolean
  default: false

variables:
  containerRegistry: 'Docker Hub'
  repository: 'pro'
  eduRepository: 'education'
  saasEduRepository: 'saas-education'
  cacheRepository: 'build-cache'
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    tag: 'latest'
  ${{ else }}:
    tag: 'beta'

jobs:
- job: Functions
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '16'
    displayName: Set Node Version to 16
    
  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | functions/package-lock.json'
      path: $(System.DefaultWorkingDirectory)/functions/node_modules
      cacheHitVar: FUNCTIONS_CACHE_RESTORED
    displayName: Cache Functions Dependencies

  - script: |
      npm --prefix functions install
    condition: and(succeeded(), ne(variables.FUNCTIONS_CACHE_RESTORED, 'true'))
    displayName: Install Dependencies

  - script: |
      npm --prefix functions run compile
    displayName: Build Firebase Functions

  - task: ArchiveFiles@2
    displayName: Create Firebase Functions Artifact
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/functions'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/payload.zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Firebase Functions Artifact
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/payload.zip' 
      artifactName: 'functions'

- job: AutoML
  strategy:
    matrix:
      Python39:
        python.version: '3.9'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      PACKAGE_LOCATION=$(python -c 'import sys;print(sys.prefix)')
      echo "##vso[task.setvariable variable=PACKAGE_LOCATION]$PACKAGE_LOCATION"
    displayName: Get Python Packages Directory

  - task: Cache@2
    inputs:
      key: 'pip | "$(Agent.OS)" | requirements.txt'
      path: $(PACKAGE_LOCATION)
    displayName: Cache Python Dependencies

  - script: |
      python -m pip install --upgrade pip
      pip install -r requirements.txt
    displayName: Install dependencies

  - script: |
      pip install pytest pytest-azurepipelines
      pytest
    displayName: ML Module Unit Test

- job: Docker
  condition: and(succeeded(), or(eq(${{ parameters.forceDockerBuild }}, true), eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  uses:
    repositories:
      - PreprocessorRepo
  steps:
  - checkout: self
    submodules: true

  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'serviceAccountKey.json'

  - task: NodeTool@0
    inputs:
      versionSpec: '16'
    displayName: Set Node Version to 16
    
  - task: gitversion/setup@0
    inputs:
      versionSpec: '5.x'
    displayName: 'Install GitVersion'

  - task: gitversion/execute@0
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)'
    displayName: 'Run GitVersion'

  - script: |
      sed -i.bak "s|\"version\": \"[0-9\.]*\"|\"version\": \"$GITVERSION_MAJORMINORPATCH\"|" package.json
    displayName: 'Update package version'

  - task: Docker@2
    inputs:
      containerRegistry: '$(containerRegistry)'
      command: 'login'
    displayName: Login to Container Registry
  
  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | ui/package-lock.json'
      path: $(System.DefaultWorkingDirectory)/ui/node_modules
      cacheHitVar: UI_CACHE_RESTORED
    displayName: Cache UI Dependencies

  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | docs/package-lock.json'
      path: $(System.DefaultWorkingDirectory)/docs/node_modules
      cacheHitVar: DOCS_CACHE_RESTORED
    displayName: Cache Docs Dependencies

  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | preprocessor/package-lock.json'
      path: $(System.DefaultWorkingDirectory)/preprocessor/node_modules
      cacheHitVar: PP_CACHE_RESTORED
    displayName: Cache Preprocessor Dependencies

  - script: |
      npm --prefix ui install
    condition: and(succeeded(), ne(variables.UI_CACHE_RESTORED, 'true'))
    displayName: Install UI dependencies

  - script: |
      npm --prefix docs install
    condition: and(succeeded(), ne(variables.DOCS_CACHE_RESTORED, 'true'))
    displayName: Install Docs dependencies

  - script: |
      npm --prefix preprocessor install
    condition: and(succeeded(), ne(variables.PP_CACHE_RESTORED, 'true'))
    displayName: Install Preprocessor dependencies

  - script: |
      npm --prefix ui run build-docker
    displayName: Build AutoML UI

  - script: |
      npm --prefix docs run build
    displayName: Build Documentation

  - script: |
      npm --prefix preprocessor run milo-build
    displayName: Build Preprocessor UI

  - script: |
      docker run --privileged --rm tonistiigi/binfmt --install arm64
      docker run --privileged --rm tonistiigi/binfmt
      docker buildx create --use
    displayName: Add Support for ARM64 Docker Build

  - script: |
      docker buildx build --platform linux/amd64,linux/arm64 \
        --cache-from=type=registry,ref=$(acr_address)/$(cacheRepository) \
        --cache-to=type=registry,ref=$(acr_address)/$(cacheRepository),mode=max \
        -t $(acr_address)/$(repository):$(GitVersion.SemVer) \
        -t $(acr_address)/$(repository):$(tag) \
        --push \
        .
    displayName: Build Docker Image

  - script: |
      pip install requests Flask licensing
      python sign_educational_license.py
    displayName: Create Education License

  - script: |
      docker buildx build --platform linux/amd64,linux/arm64 \
        --cache-from=type=registry,ref=$(acr_address)/$(cacheRepository) \
        -t $(acr_address)/$(eduRepository):$(GitVersion.SemVer) \
        -t $(acr_address)/$(eduRepository):$(tag) \
        --push \
        .
    displayName: Build Education Docker Image

  - script: |
      docker buildx build --platform linux/amd64,linux/arm64 \
        --cache-from=type=registry,ref=$(acr_address)/$(cacheRepository) \
        -t $(acr_address)/$(saasEduRepository):$(GitVersion.SemVer) \
        -t $(acr_address)/$(saasEduRepository):$(tag) \
        -f Dockerfile-SaaS \
        --push \
        .
    displayName: Build SaaS Education Docker Image

  - task: CopyFiles@2
    displayName: Copy Firebase Configuration to Staging
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: |
        firebase.json
        firestore.rules
        firestore.indexes.json
      TargetFolder: '$(Build.ArtifactStagingDirectory)/firebase'

  - task: CopyFiles@2
    displayName: Copy Front-End to Staging
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/static'
      Contents: '**'
      TargetFolder: '$(build.ArtifactStagingDirectory)/firebase/static'

  - task: ArchiveFiles@2
    displayName: Create Firebase Artifact
    inputs:
      rootFolderOrFile: '$(build.ArtifactStagingDirectory)/firebase'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/payload.zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Firebase Hosting Artifact
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/payload.zip' 
      artifactName: 'static'
